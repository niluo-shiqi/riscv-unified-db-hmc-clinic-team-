/*
 * generated by Xtext 2.40.0
 */
grammar InternalRiscv;

options {
	superClass=AbstractInternalContentAssistParser;
}

@lexer::header {
package org.xtext.clinic.ide.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package org.xtext.clinic.ide.contentassist.antlr.internal;

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.DFA;
import org.xtext.clinic.services.RiscvGrammarAccess;

}
@parser::members {
	private RiscvGrammarAccess grammarAccess;

	public void setGrammarAccess(RiscvGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}

	@Override
	protected Grammar getGrammar() {
		return grammarAccess.getGrammar();
	}

	@Override
	protected String getValueForTokenName(String tokenName) {
		return tokenName;
	}
}

// Entry rule entryRuleModel
entryRuleModel
:
{ before(grammarAccess.getModelRule()); }
	 ruleModel
{ after(grammarAccess.getModelRule()); } 
	 EOF 
;

// Rule Model
ruleModel 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getModelAccess().getCsrsAssignment()); }
		(rule__Model__CsrsAssignment)*
		{ after(grammarAccess.getModelAccess().getCsrsAssignment()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleCsr
entryRuleCsr
:
{ before(grammarAccess.getCsrRule()); }
	 ruleCsr
{ after(grammarAccess.getCsrRule()); } 
	 EOF 
;

// Rule Csr
ruleCsr 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getCsrAccess().getGroup()); }
		(rule__Csr__Group__0)
		{ after(grammarAccess.getCsrAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Csr__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Csr__Group__0__Impl
	rule__Csr__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Csr__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCsrAccess().getCsrKeyword_0()); }
	'csr'
	{ after(grammarAccess.getCsrAccess().getCsrKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Csr__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Csr__Group__1__Impl
	rule__Csr__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Csr__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCsrAccess().getNameAssignment_1()); }
	(rule__Csr__NameAssignment_1)
	{ after(grammarAccess.getCsrAccess().getNameAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Csr__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Csr__Group__2__Impl
	rule__Csr__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Csr__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCsrAccess().getDescriptionAssignment_2()); }
	(rule__Csr__DescriptionAssignment_2)
	{ after(grammarAccess.getCsrAccess().getDescriptionAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Csr__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Csr__Group__3__Impl
	rule__Csr__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Csr__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCsrAccess().getAddressAssignment_3()); }
	(rule__Csr__AddressAssignment_3)
	{ after(grammarAccess.getCsrAccess().getAddressAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Csr__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Csr__Group__4__Impl
	rule__Csr__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__Csr__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCsrAccess().getReset_valueAssignment_4()); }
	(rule__Csr__Reset_valueAssignment_4)
	{ after(grammarAccess.getCsrAccess().getReset_valueAssignment_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Csr__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Csr__Group__5__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Csr__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCsrAccess().getSemicolonKeyword_5()); }
	';'
	{ after(grammarAccess.getCsrAccess().getSemicolonKeyword_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Model__CsrsAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getModelAccess().getCsrsCsrParserRuleCall_0()); }
		ruleCsr
		{ after(grammarAccess.getModelAccess().getCsrsCsrParserRuleCall_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Csr__NameAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getCsrAccess().getNameIDTerminalRuleCall_1_0()); }
		RULE_ID
		{ after(grammarAccess.getCsrAccess().getNameIDTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Csr__DescriptionAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getCsrAccess().getDescriptionSTRINGTerminalRuleCall_2_0()); }
		RULE_STRING
		{ after(grammarAccess.getCsrAccess().getDescriptionSTRINGTerminalRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Csr__AddressAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getCsrAccess().getAddressHEXTerminalRuleCall_3_0()); }
		RULE_HEX
		{ after(grammarAccess.getCsrAccess().getAddressHEXTerminalRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Csr__Reset_valueAssignment_4
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getCsrAccess().getReset_valueSTRINGTerminalRuleCall_4_0()); }
		RULE_STRING
		{ after(grammarAccess.getCsrAccess().getReset_valueSTRINGTerminalRuleCall_4_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

RULE_HEX : ('0x'|'0X') ('0'..'9'|'A'..'F'|'a'..'f'|'_')+;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
